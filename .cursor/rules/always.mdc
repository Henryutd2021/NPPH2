---
description: 
globs: 
alwaysApply: true
---
---
name: cursor-project-rules
description: Project-wide best practices, coding standards, and developer preferences to guide Cursor AI in generating high-quality, consistent, and maintainable code.
appliesTo: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.py", "**/*.json", "**/*.md"]
type: always
---

## üîß Code Style & Naming Conventions

- Use **camelCase** for variables and functions.
- Use **PascalCase** for class names and React components.
- Use **kebab-case** for folders and filenames (e.g., `components/auth-form`).
- Enforce consistent indentation (2 spaces for JS/TS, 4 spaces for Python).
- Prefer **named exports** over default exports.
- Avoid unnecessary curly braces in single-line conditionals.

## üß± Project Structure & Patterns

- Prioritize **modular, reusable components**.
- Promote **functional and declarative programming** patterns when possible.
- Avoid overuse of classes unless explicitly required by the framework.
- Apply the **DRY** principle: refactor repetitive logic into utilities or reusable components.

## ‚öôÔ∏è Framework & Stack Guidelines

- In **React** projects:
  - Always use **function components** with **Hooks**.
  - Avoid class components unless migrating legacy code.
- In **TypeScript** projects:
  - Enable **strict mode** in `tsconfig.json`.
  - Always prefer `interface` over `type` unless intersection types are required.
  - Avoid `enum`; use `const` objects or string literal types instead.
  - Strictly avoid using `any`.

## üß™ Testing & QA

- All logic must be covered by **unit or integration tests**.
- Use **clear and descriptive test names**.
- Do not commit code unless all tests pass.
- Include a **clear PR description** with context and implementation details.

## üîí Error Handling & Validation

- Validate **all user inputs**.
- Catch errors early and **log them clearly**.
- Use **custom error types** for API responses instead of generic exceptions.

## ‚ö° Performance Optimization

- Avoid unnecessary re-renders in React by using `memo`, `useCallback`, etc.
- Avoid synchronous blocking operations or large computations in the main thread.
- Do not introduce large dependencies for trivial tasks (e.g., use native methods when possible).

## üîê Security Best Practices

- Sanitize and validate **all inputs**.
- Always use **HTTPS** for external requests.
- Follow **minimum privilege principle** for permissions (e.g., `manifest.json` in extensions).
- Use secure authentication mechanisms like **OAuth2** or **JWT**.

## üì¶ Dependency Management

- Use preferred libraries specified in `package.json`.
- Avoid unnecessary dependencies ‚Äî **do not import libraries for functionality that is easily handled with native features**.
- Use `npm audit` or `yarn audit` regularly and fix high/critical issues.

## üßæ Git & Commit Standards

- Use **Conventional Commits**:  
  `feat:`, `fix:`, `docs:`, `refactor:`, `test:`, `chore:`, etc.
- Keep commit messages under 72 characters and describe changes clearly.

## üìÑ File References for Context

- Refer to `tsconfig.json` for TypeScript rules.
- Refer to `tailwind.config.js` for styling conventions.
- Refer to `README.md` for architectural decisions and project goals.

## ü§ñ AI Guidance & Style

- AI responses should be:
  - **Clear, specific, and concise**.
  - **Avoid repetition or filler text**.
  - **Ask clarifying questions** when context is insufficient.
- When showing examples, use **short, relevant snippets**.

## üß† Collaboration Tips for Cursor Users

- Use `/Reference Open Editors` to ensure relevant files are in context.
- Keep the **code index up to date** (`Resync Index` if files are renamed/moved).
- Use **Notepads** for reusable prompts, naming conventions, or endpoint documentation.
- Plan before coding. Use Markdown to sketch architecture, then refer to it explicitly (e.g., `@docs/api-layout.md`).

---
